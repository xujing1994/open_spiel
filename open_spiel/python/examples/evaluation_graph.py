from absl import app
from absl import flags
import numpy as np
from matplotlib.legend_handler import HandlerLine2D
import matplotlib.pyplot as plt

def read_wr(txt_name):
    text_file = open(txt_name, "r")
    lines = text_file.read().split("\n")
    list1 = []
    list2 = []
    list3 = []
    for line in lines[:-1]:
        [str1, str2, str3] = line.split(" ")
        list1.append(float(str1))
        list2.append(float(str2))
        list3.append(float(str3))
    return list1, list2, list3

def read_exploitability(txt_name):
    txt_file = open(txt_name, 'r')
    lines = txt_file.read().split('\n')
    num_list = []
    for str in lines[:-1]:
        if str == "NaN":
            num_list.append(1)
        else:
            num_list.append(float(str))
    return num_list

def read_loss(txt_name):
    txt_file = open(txt_name)
    lines = txt_file.read().split('\n')
    list1 = []
    list2 = []
    for line in lines[:-1]:
        [str1, str2] = line.split(' ')
        if str1 != 'None':
            list1.append(float(str1))
        else:
            list1.append(str1)
        if str2 != 'None':
            list2.append(float(str2))
        else:
            list2.append(str2)
    for idx, number in enumerate(list1):
        if number == 'None':
            list1[idx] = list1[idx+1]
    for number, idx in enumerate(list2):
        if number == 'None':
            list2[idx] = list2[idx+1]
    return list1, list2
def read_behavior_probs(txt_name):
    text_file = open(txt_name, "r")
    lines = text_file.read().split("\n")
    list1 = []
    list2 = []
    list3 = []
    list4 = []
    list5 = []
    list6 = []
    list7 = []
    list8 = []
    for line in lines[:-1]:
        [str1, str2, str3, str4, str5, str6, str7, str8] = line.split(" ")
        list1.append(float(str1))
        list2.append(float(str2))
        list3.append(float(str3))
        list4.append(float(str4))
        list5.append(float(str5))
        list6.append(float(str6))
        list7.append(float(str7))
        list8.append(float(str8))
    return list1, list2, list3, list4, list5, list6, list7, list8




def main(argv):
    kuhn_poker_nfsp_0 = "/home/jxu8/Code_update/open_spiel/evaluation_data/eval_kp_nfsp_0.1_7_27/"
    kuhn_poker_nfsp_1 = "/home/jxu8/Code_update/open_spiel/evaluation_data/eval_kp_nfsp_1_7_28/"
    ttt_nfsp_0 = "/home/jxu8/Code_update/open_spiel/evaluation_data/eval_ttt_nfsp_0.1_7_26/"
    ttt_nfsp_1 = "/home/jxu8/Code_update/open_spiel/evaluation_data/eval_ttt_nfsp_1_7_29/"

    kuhn_poker_psro = "/home/jxu8/Code/open_spiel/evaluation_data/eval_kuhn_poker_psro_7_2/"


    # exploitabilities_kuhn_poker_psro = read_eval(kuhn_poker_psro + 'exploitabilities.txt')
    # array = np.array(exploitabilities_kuhn_poker_psro)
    # print(array[:,0])

    expl_0 = []
    expl_1 = []
    loss_agent0 = []
    loss_agent1 = []
    win_rates_against_random1_eta0 = [] #load win rates against random agent1, trained with eta 0.1
    win_rates_against_random0_eta0 = [] #load win rates against random agetn0, trained with eta 0.1
    win_rates_against_random1_eta1 = [] #load win rates against random agent1, trained with eta 1
    win_rates_against_random0_eta1 = [] #load win rates against random agent0, trained with eta 1
    win_rates_against_eachother_eta0 = [] #load win rates against each other, trained with eta 0.1
    win_rates_against_eachother_eta1 = [] #load win rates against each other, trained with eta 1
    bp_jk = []
    bp_jq = []
    bp_kj = []
    bp_kq = []
    bp_qj = []
    bp_qk = []

    avg_rewards_0_against_eachother = []
    avg_rewards_1_against_eachother = []

    bp_jk.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0.1/policy_based/JK.txt'))
    bp_jq.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0.1/policy_based/JQ.txt'))
    bp_kj.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0.1/policy_based/KJ.txt'))
    bp_kq.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0.1/policy_based/KQ.txt'))
    bp_qj.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0.1/policy_based/QJ.txt'))
    bp_qk.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0.1/policy_based/QK.txt'))

    bp_jk.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_1/policy_based/JK.txt'))
    bp_jq.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_1/policy_based/JQ.txt'))
    bp_kj.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_1/policy_based/KJ.txt'))
    bp_kq.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_1/policy_based/KQ.txt'))
    bp_qj.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_1/policy_based/QJ.txt'))
    bp_qk.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_1/policy_based/QK.txt'))


    bp_jk.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0.1/policy_based/JK.txt'))
    bp_jq.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0.1/policy_based/JQ.txt'))
    bp_kj.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0.1/policy_based/KJ.txt'))
    bp_kq.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0.1/policy_based/KQ.txt'))
    bp_qj.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0.1/policy_based/QJ.txt'))
    bp_qk.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0.1/policy_based/QK.txt'))

    bp_jk.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_1/policy_based/JK.txt'))
    bp_jq.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_1/policy_based/JQ.txt'))
    bp_kj.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_1/policy_based/KJ.txt'))
    bp_kq.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_1/policy_based/KQ.txt'))
    bp_qj.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_1/policy_based/QJ.txt'))
    bp_qk.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_1/policy_based/QK.txt'))

    bp_jk.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0/policy_based/JK.txt'))
    bp_jq.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0/policy_based/JQ.txt'))
    bp_kj.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0/policy_based/KJ.txt'))
    bp_kq.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0/policy_based/KQ.txt'))
    bp_qj.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0/policy_based/QJ.txt'))
    bp_qk.append(read_behavior_probs(kuhn_poker_nfsp_0 + 'behavior_probs/eta_0/policy_based/QK.txt'))

    bp_jk.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0/policy_based/JK.txt'))
    bp_jq.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0/policy_based/JQ.txt'))
    bp_kj.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0/policy_based/KJ.txt'))
    bp_kq.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0/policy_based/KQ.txt'))
    bp_qj.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0/policy_based/QJ.txt'))
    bp_qk.append(read_behavior_probs(kuhn_poker_nfsp_1 + 'behavior_probs/eta_0/policy_based/QK.txt'))

    tmp_list = [bp_jk[4], bp_jq[4], bp_kj[4], bp_kq[4], bp_qj[4], bp_qk[4]]
    alpha_1 = [1 - tmp_list[0][0][i] for i in range(len(tmp_list[0][0]))]
    alpha_2 = [1 - tmp_list[1][0][i] for i in range(len(tmp_list[1][0]))]
    alpha_3 = [(1/3) * (1 - tmp_list[2][0][i]) for i in range(len(tmp_list[2][0]))]
    alpha_4 = [(1/3) * (1 - tmp_list[3][0][i]) for i in range(len(tmp_list[2][0]))]
    alpha_5 = [2/3 - tmp_list[4][6][i] for i in range(len(tmp_list[4][6]))]
    alpha_6 = [2/3 - tmp_list[5][6][i] for i in range(len(tmp_list[5][6]))]

    ax2 = plt.figure(figsize=(10, 10))
    #ax2.set_title("JK (kuhn_poker_nfsp_0.1, eta0.1 in evaluation)")
    #plt.ylim(0, 0.35)
    line1, = plt.plot(alpha_1, "b-", label="1")
    line2, = plt.plot(alpha_2, "b*", label="2")
    line3, = plt.plot(alpha_3, "g-", label="3")
    line4, = plt.plot(alpha_4, "g*", label="4")
    line5, = plt.plot(alpha_5, "y-", label="5")
    line6, = plt.plot(alpha_5, "y*", label="6")
    plt.legend(handles=[line1, line2, line3, line4, line5, line6], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()

    expl_0.append(read_exploitability('/home/jxu8/Code_update/open_spiel/sessions_nfsp/kuhn_poker_0.1_7_27/' + 'exploitabilities.txt'))
    expl_0.append(read_exploitability(ttt_nfsp_0 + 'exploitabilities.txt'))
    expl_1.append(read_exploitability('/home/jxu8/Code_update/open_spiel/sessions_nfsp/kuhn_poker_1_7_28/' + 'exploitability.txt'))
    expl_1.append(read_exploitability(ttt_nfsp_1 + 'exploitabilities.txt'))

    loss_agent0.append(read_loss('/home/jxu8/Code_update/open_spiel/sessions_nfsp/kuhn_poker_0.1_7_27/loss_agent0.txt'))
    loss_agent1.append(read_loss('/home/jxu8/Code_update/open_spiel/sessions_nfsp/kuhn_poker_0.1_7_27/loss_agent1.txt'))
    loss_agent0.append(read_loss('/home/jxu8/Code_update/open_spiel/sessions_nfsp/kuhn_poker_1_7_28/loss_agent0.txt'))
    loss_agent1.append(read_loss('/home/jxu8/Code_update/open_spiel/sessions_nfsp/kuhn_poker_1_7_28/loss_agent1.txt'))

    loss_agent0.append(read_loss('/home/jxu8/Code_update/open_spiel/sessions_nfsp/tic_tac_toe_0.1_7_26/loss_agent0.txt'))
    loss_agent1.append(read_loss('/home/jxu8/Code_update/open_spiel/sessions_nfsp/tic_tac_toe_0.1_7_26/loss_agent1.txt'))
    loss_agent0.append(read_loss('/home/jxu8/Code_update/open_spiel/sessions_nfsp/tic_tac_toe_1_7_29/loss_agent0.txt'))
    loss_agent1.append(read_loss('/home/jxu8/Code_update/open_spiel/sessions_nfsp/tic_tac_toe_1_7_29/loss_agent1.txt'))
    # load win_rates with eta0.1 in training
    win_rates_against_random1_eta0.append(read_wr(ttt_nfsp_0 + 'win_rates/eta_0/win_rates_against_random_agent1.txt')) # load win rates of trained agent0 against random agent1, with eta 0 in evaluation process (average policy only)
    win_rates_against_random0_eta0.append(read_wr(ttt_nfsp_0 + 'win_rates/eta_0/win_rates_against_random_agent0.txt')) # load win rates of trained agent1 against random agent0, with eta 0 in evaluation process (average policy only)

    win_rates_against_random1_eta0.append(read_wr(ttt_nfsp_0 + 'win_rates/eta_0.1/win_rates_against_random_agent1.txt')) # load win rates of trained agent0 against random agent1, with eta 0.1 in evaluation process
    win_rates_against_random0_eta0.append(read_wr(ttt_nfsp_0 + 'win_rates/eta_0.1/win_rates_against_random_agent0.txt')) # load win rates of trained agent1 against random agent0, with eta 0.1 in evaluation process

    win_rates_against_random1_eta0.append(read_wr(ttt_nfsp_0 + 'win_rates/eta_1/win_rates_against_random_agent1.txt'))
    win_rates_against_random0_eta0.append(read_wr(ttt_nfsp_0 + 'win_rates/eta_1/win_rates_against_random_agent0.txt'))

    win_rates_against_random1_eta0.append(read_wr(kuhn_poker_nfsp_0 + 'win_rates/eta_0/win_rates_against_random_agent1.txt')) # load win rates of trained agent0 against random agent1, with eta 0 in evaluation process (average policy only)
    win_rates_against_random0_eta0.append(read_wr(kuhn_poker_nfsp_0 + 'win_rates/eta_0/win_rates_against_random_agent0.txt')) # load win rates of trained agent1 against random agent0, with eta 0 in evaluation process (average policy only)

    win_rates_against_random1_eta0.append(read_wr(kuhn_poker_nfsp_0 + 'win_rates/eta_0.1/win_rates_against_random_agent1.txt')) # load win rates of trained agent0 against random agent1, with eta 0.1 in evaluation process
    win_rates_against_random0_eta0.append(read_wr(kuhn_poker_nfsp_0 + 'win_rates/eta_0.1/win_rates_against_random_agent0.txt')) # load win rates of trained agent1 against random agent0, with eta 0.1 in evaluation process

    win_rates_against_random1_eta0.append(read_wr(kuhn_poker_nfsp_0 + 'win_rates/eta_1/win_rates_against_random_agent1.txt'))
    win_rates_against_random0_eta0.append(read_wr(kuhn_poker_nfsp_0 + 'win_rates/eta_1/win_rates_against_random_agent0.txt'))


    win_rates_against_eachother_eta0.append(read_wr(ttt_nfsp_0 + 'win_rates/eta_0/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent1, with eta 0 for both in the evaluation process (both use average policy only)

    win_rates_against_eachother_eta0.append(read_wr(ttt_nfsp_0 + 'win_rates/eta_1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 1 for trained agent0, and eta 1 for trained agent1
                                                                                                                # (both trained agents use best response policy only)
    win_rates_against_eachother_eta0.append(read_wr(ttt_nfsp_0 + 'win_rates/eta_0.1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 0.1 for both agents
                                                                                                                # (trained agetn0 use best response policy only and trained agent 1 use average policy only)
    win_rates_against_eachother_eta0.append(read_wr(ttt_nfsp_0 + 'win_rates/eta_0_1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 0 for trained agent0, and eta 1 for trained agent1
                                                                                                                  # (trained agetn0 use average policy only and trained agent 1 use best response policy only)
    win_rates_against_eachother_eta0.append(read_wr(ttt_nfsp_0 + 'win_rates/eta_1_0/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 1 for trained agent0, and eta 0 for trained agent1
                                                                                                                # (trained agetn0 use best response policy only and trained agent 1 use average policy only)
    win_rates_against_eachother_eta0.append(read_wr(kuhn_poker_nfsp_0 + 'win_rates/eta_0/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent1, with eta 0 for both in the evaluation process (both use average policy only)

    win_rates_against_eachother_eta0.append(read_wr(kuhn_poker_nfsp_0 + 'win_rates/eta_1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 1 for trained agent0, and eta 1 for trained agent1
                                                                                                                # (both trained agents use best response policy only)
    win_rates_against_eachother_eta0.append(read_wr(kuhn_poker_nfsp_0 + 'win_rates/eta_0.1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 0.1 for both agents
                                                                                                                # (trained agetn0 use best response policy only and trained agent 1 use average policy only)
    win_rates_against_eachother_eta0.append(read_wr(kuhn_poker_nfsp_0 + 'win_rates/eta_0_1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 0 for trained agent0, and eta 1 for trained agent1
                                                                                                                  # (trained agetn0 use average policy only and trained agent 1 use best response policy only)
    win_rates_against_eachother_eta0.append(read_wr(kuhn_poker_nfsp_0 + 'win_rates/eta_1_0/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 1 for trained agent0, and eta 0 for trained agent1
                                                                                                                # (trained agetn0 use best response policy only and trained agent 1 use average policy only)
    #load win rates with eta1 in training
    win_rates_against_random1_eta1.append(read_wr(ttt_nfsp_1 + 'win_rates/eta_0/win_rates_against_random_agent1.txt')) # load win rates of trained agent0 against random agent1, with eta 0 in evaluation process (average policy only)
    win_rates_against_random0_eta1.append(read_wr(ttt_nfsp_1 + 'win_rates/eta_0/win_rates_against_random_agent0.txt')) # load win rates of trained agent1 against random agent0, with eta 0 in evaluation process (average policy only)

    win_rates_against_random1_eta1.append(read_wr(ttt_nfsp_1 + 'win_rates/eta_0.1/win_rates_against_random_agent1.txt')) # load win rates of trained agent0 against random agent1, with eta 0.1 in evaluation process
    win_rates_against_random0_eta1.append(read_wr(ttt_nfsp_1 + 'win_rates/eta_0.1/win_rates_against_random_agent0.txt')) # load win rates of trained agent1 against random agent0, with eta 0.1 in evaluation process

    win_rates_against_random1_eta1.append(read_wr(ttt_nfsp_1 + 'win_rates/eta_1/win_rates_against_random_agent1.txt'))
    win_rates_against_random0_eta1.append(read_wr(ttt_nfsp_1 + 'win_rates/eta_1/win_rates_against_random_agent0.txt'))

    win_rates_against_random1_eta1.append(read_wr(kuhn_poker_nfsp_1 + 'win_rates/eta_0/win_rates_against_random_agent1.txt')) # load win rates of trained agent0 against random agent1, with eta 0 in evaluation process (average policy only)
    win_rates_against_random0_eta1.append(read_wr(kuhn_poker_nfsp_1 + 'win_rates/eta_0/win_rates_against_random_agent0.txt')) # load win rates of trained agent1 against random agent0, with eta 0 in evaluation process (average policy only)

    win_rates_against_random1_eta1.append(read_wr(kuhn_poker_nfsp_1 + 'win_rates/eta_0.1/win_rates_against_random_agent1.txt')) # load win rates of trained agent0 against random agent1, with eta 0.1 in evaluation process
    win_rates_against_random0_eta1.append(read_wr(kuhn_poker_nfsp_1 + 'win_rates/eta_0.1/win_rates_against_random_agent0.txt')) # load win rates of trained agent1 against random agent0, with eta 0.1 in evaluation process

    win_rates_against_random1_eta1.append(read_wr(kuhn_poker_nfsp_1 + 'win_rates/eta_1/win_rates_against_random_agent1.txt'))
    win_rates_against_random0_eta1.append(read_wr(kuhn_poker_nfsp_1 + 'win_rates/eta_1/win_rates_against_random_agent0.txt'))


    win_rates_against_eachother_eta1.append(read_wr(ttt_nfsp_1 + 'win_rates/eta_0/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent1, with eta 0 for both in the evaluation process (both use average policy only)

    win_rates_against_eachother_eta1.append(read_wr(ttt_nfsp_1 + 'win_rates/eta_1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 1 for trained agent0, and eta 1 for trained agent1
                                                                                                                # (both trained agents use best response policy only)
    win_rates_against_eachother_eta1.append(read_wr(ttt_nfsp_1 + 'win_rates/eta_0.1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 0.1 for both agents
                                                                                                                # (trained agetn0 use best response policy only and trained agent 1 use average policy only)
    win_rates_against_eachother_eta1.append(read_wr(ttt_nfsp_1 + 'win_rates/eta_0_1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 0 for trained agent0, and eta 1 for trained agent1
                                                                                                                  # (trained agetn0 use average policy only and trained agent 1 use best response policy only)
    win_rates_against_eachother_eta1.append(read_wr(ttt_nfsp_1 + 'win_rates/eta_1_0/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 1 for trained agent0, and eta 0 for trained agent1
                                                                                                                # (trained agetn0 use best response policy only and trained agent 1 use average policy only)
    win_rates_against_eachother_eta1.append(read_wr(kuhn_poker_nfsp_1 + 'win_rates/eta_0/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent1, with eta 0 for both in the evaluation process (both use average policy only)

    win_rates_against_eachother_eta1.append(read_wr(kuhn_poker_nfsp_1 + 'win_rates/eta_1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 1 for trained agent0, and eta 1 for trained agent1
                                                                                                                # (both trained agents use best response policy only)
    win_rates_against_eachother_eta1.append(read_wr(kuhn_poker_nfsp_1 + 'win_rates/eta_0.1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 0.1 for both agents
                                                                                                                # (trained agetn0 use best response policy only and trained agent 1 use average policy only)
    win_rates_against_eachother_eta1.append(read_wr(kuhn_poker_nfsp_1 + 'win_rates/eta_0_1/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 0 for trained agent0, and eta 1 for trained agent1
                                                                                                                  # (trained agetn0 use average policy only and trained agent 1 use best response policy only)
    win_rates_against_eachother_eta1.append(read_wr(kuhn_poker_nfsp_1 + 'win_rates/eta_1_0/win_rates_against_eachother.txt')) # load win rates of trained agent0 against trained agent0, with eta 1 for trained agent0, and eta 0 for trained agent1
                                                                                                                # (trained agetn0 use best response policy only and trained agent 1 use average policy only)
    # load avg_utility against eachother with eta 0 in training
    avg_rewards_0_against_eachother.append(read_loss(kuhn_poker_nfsp_0 + 'avg_utility/eta_0/avg_utility_against_eachother.txt'))
    avg_rewards_0_against_eachother.append(read_loss(kuhn_poker_nfsp_0 + 'avg_utility/eta_1/avg_utility_against_eachother.txt'))
    avg_rewards_0_against_eachother.append(read_loss(kuhn_poker_nfsp_0 + 'avg_utility/eta_0.1/avg_utility_against_eachother.txt'))
    avg_rewards_0_against_eachother.append(read_loss(kuhn_poker_nfsp_0 + 'avg_utility/eta_0_1/avg_utility_against_eachother.txt'))
    avg_rewards_0_against_eachother.append(read_loss(kuhn_poker_nfsp_0 + 'avg_utility/eta_1_0/avg_utility_against_eachother.txt'))

    avg_rewards_0_against_eachother.append(read_loss(ttt_nfsp_0 + 'avg_utility/eta_0/avg_utility_against_eachother.txt'))
    avg_rewards_0_against_eachother.append(read_loss(ttt_nfsp_0 + 'avg_utility/eta_1/avg_utility_against_eachother.txt'))
    avg_rewards_0_against_eachother.append(read_loss(ttt_nfsp_0 + 'avg_utility/eta_0.1/avg_utility_against_eachother.txt'))
    avg_rewards_0_against_eachother.append(read_loss(ttt_nfsp_0 + 'avg_utility/eta_0_1/avg_utility_against_eachother.txt'))
    avg_rewards_0_against_eachother.append(read_loss(ttt_nfsp_0 + 'avg_utility/eta_1_0/avg_utility_against_eachother.txt'))
    # load avg_utility against eachother with eta 1 in training
    avg_rewards_1_against_eachother.append(read_loss(kuhn_poker_nfsp_1 + 'avg_utility/eta_0/avg_utility_against_eachother.txt'))
    avg_rewards_1_against_eachother.append(read_loss(kuhn_poker_nfsp_1 + 'avg_utility/eta_1/avg_utility_against_eachother.txt'))
    avg_rewards_1_against_eachother.append(read_loss(kuhn_poker_nfsp_1 + 'avg_utility/eta_0.1/avg_utility_against_eachother.txt'))
    avg_rewards_1_against_eachother.append(read_loss(kuhn_poker_nfsp_1 + 'avg_utility/eta_0_1/avg_utility_against_eachother.txt'))
    avg_rewards_1_against_eachother.append(read_loss(kuhn_poker_nfsp_1 + 'avg_utility/eta_1_0/avg_utility_against_eachother.txt'))

    avg_rewards_1_against_eachother.append(read_loss(ttt_nfsp_1 + 'avg_utility/eta_0/avg_utility_against_eachother.txt'))
    avg_rewards_1_against_eachother.append(read_loss(ttt_nfsp_1 + 'avg_utility/eta_1/avg_utility_against_eachother.txt'))
    avg_rewards_1_against_eachother.append(read_loss(ttt_nfsp_1 + 'avg_utility/eta_0.1/avg_utility_against_eachother.txt'))
    avg_rewards_1_against_eachother.append(read_loss(ttt_nfsp_1 + 'avg_utility/eta_0_1/avg_utility_against_eachother.txt'))
    avg_rewards_1_against_eachother.append(read_loss(ttt_nfsp_1 + 'avg_utility/eta_1_0/avg_utility_against_eachother.txt'))

    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("JK (kuhn_poker_nfsp_0.1, eta0.1 in evaluation)")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jk[0][0], "b", label="1")
    line2, = plt.plot(bp_jk[0][2], "r", label="2")
    line3, = plt.plot(bp_jk[0][4], "g", label="3")
    line4, = plt.plot(bp_jk[0][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("JQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jq[0][0], "b", label="1")
    line2, = plt.plot(bp_jq[0][2], "r", label="2")
    line3, = plt.plot(bp_jq[0][4], "g", label="3")
    line4, = plt.plot(bp_jq[0][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("KJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kj[0][0], "b", label="1")
    line2, = plt.plot(bp_kj[0][2], "r", label="2")
    line3, = plt.plot(bp_kj[0][4], "g", label="3")
    line4, = plt.plot(bp_kj[0][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("KQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kq[0][0], "b", label="1")
    line2, = plt.plot(bp_kq[0][2], "r", label="2")
    line3, = plt.plot(bp_kq[0][4], "g", label="3")
    line4, = plt.plot(bp_kq[0][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("QJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qj[0][0], "b", label="1")
    line2, = plt.plot(bp_qj[0][2], "r", label="2")
    line3, = plt.plot(bp_qj[0][4], "g", label="3")
    line4, = plt.plot(bp_qj[0][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("QK")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qk[0][0], "b", label="1")
    line2, = plt.plot(bp_qk[0][2], "r", label="2")
    line3, = plt.plot(bp_qk[0][4], "g", label="3")
    line4, = plt.plot(bp_qk[0][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()



    # plt bp for kuhn_poker_nfsp_0.1, eta1 in evaluation
    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("JK (kuhn_poker_nfsp_0.1, eta1 in evaluation)")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jk[1][0], "b", label="1")
    line2, = plt.plot(bp_jk[1][2], "r", label="2")
    line3, = plt.plot(bp_jk[1][4], "g", label="3")
    line4, = plt.plot(bp_jk[1][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("JQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jq[1][0], "b", label="1")
    line2, = plt.plot(bp_jq[1][2], "r", label="2")
    line3, = plt.plot(bp_jq[1][4], "g", label="3")
    line4, = plt.plot(bp_jq[1][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("KJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kj[1][0], "b", label="1")
    line2, = plt.plot(bp_kj[1][2], "r", label="2")
    line3, = plt.plot(bp_kj[1][4], "g", label="3")
    line4, = plt.plot(bp_kj[1][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("KQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kq[1][0], "b", label="1")
    line2, = plt.plot(bp_kq[1][2], "r", label="2")
    line3, = plt.plot(bp_kq[1][4], "g", label="3")
    line4, = plt.plot(bp_kq[1][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("QJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qj[1][0], "b", label="1")
    line2, = plt.plot(bp_qj[1][2], "r", label="2")
    line3, = plt.plot(bp_qj[1][4], "g", label="3")
    line4, = plt.plot(bp_qj[1][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("QK")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qk[1][0], "b", label="1")
    line2, = plt.plot(bp_qk[1][2], "r", label="2")
    line3, = plt.plot(bp_qk[1][4], "g", label="3")
    line4, = plt.plot(bp_qk[1][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("JK (kuhn_poker_nfsp_0.1, eta0 in evaluation)")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jk[4][0], "b", label="1")
    line2, = plt.plot(bp_jk[4][2], "r", label="2")
    line3, = plt.plot(bp_jk[4][4], "g", label="3")
    line4, = plt.plot(bp_jk[4][6], "y", label="4")
    plt.axhline(y=2/3,ls=":",c="blue")
    plt.axhline(y=1,ls=":",c="blue")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("JQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jq[4][0], "b", label="1")
    line2, = plt.plot(bp_jq[4][2], "r", label="2")
    line3, = plt.plot(bp_jq[4][4], "g", label="3")
    line4, = plt.plot(bp_jq[4][6], "y", label="4")
    plt.axhline(y=2/3,ls=":",c="blue")
    plt.axhline(y=1,ls=":",c="blue")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("KJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kj[4][0], "b", label="1")
    line2, = plt.plot(bp_kj[4][2], "r", label="2")
    line3, = plt.plot(bp_kj[4][4], "g", label="3")
    line4, = plt.plot(bp_kj[4][6], "y", label="4")
    plt.axhline(y=0,ls=":",c="blue")
    plt.axhline(y=1,ls=":",c="blue")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("KQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kq[4][0], "b", label="1")
    line2, = plt.plot(bp_kq[4][2], "r", label="2")
    line3, = plt.plot(bp_kq[4][4], "g", label="3")
    line4, = plt.plot(bp_kq[4][6], "y", label="4")
    plt.axhline(y=0,ls=":",c="blue")
    plt.axhline(y=1,ls=":",c="blue")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("QJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qj[4][0], "b", label="1")
    line2, = plt.plot(bp_qj[4][2], "r", label="2")
    line3, = plt.plot(bp_qj[4][4], "g", label="3")
    line4, = plt.plot(bp_qj[4][6], "y", label="4")
    plt.axhline(y=1/3,ls=":",c="yellow")
    plt.axhline(y=2/3,ls=":",c="yellow")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("QK")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qk[4][0], "b", label="1")
    line2, = plt.plot(bp_qk[4][2], "r", label="2")
    line3, = plt.plot(bp_qk[4][4], "g", label="3")
    line4, = plt.plot(bp_qk[4][6], "y", label="4")
    plt.axhline(y=1/3,ls=":",c="yellow")
    plt.axhline(y=2/3,ls=":",c="yellow")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()


    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("JK (kuhn_poker_nfsp_1, eta0.1 in evaluation)")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jk[2][0], "b", label="1")
    line2, = plt.plot(bp_jk[2][2], "r", label="2")
    line3, = plt.plot(bp_jk[2][4], "g", label="3")
    line4, = plt.plot(bp_jk[2][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("JQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jq[2][0], "b", label="1")
    line2, = plt.plot(bp_jq[2][2], "r", label="2")
    line3, = plt.plot(bp_jq[2][4], "g", label="3")
    line4, = plt.plot(bp_jq[2][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("KJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kj[2][0], "b", label="1")
    line2, = plt.plot(bp_kj[2][2], "r", label="2")
    line3, = plt.plot(bp_kj[2][4], "g", label="3")
    line4, = plt.plot(bp_kj[2][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("KQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kq[2][0], "b", label="1")
    line2, = plt.plot(bp_kq[2][2], "r", label="2")
    line3, = plt.plot(bp_kq[2][4], "g", label="3")
    line4, = plt.plot(bp_kq[2][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("QJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qj[2][0], "b", label="1")
    line2, = plt.plot(bp_qj[2][2], "r", label="2")
    line3, = plt.plot(bp_qj[2][4], "g", label="3")
    line4, = plt.plot(bp_qj[2][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("QK")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qk[2][0], "b", label="1")
    line2, = plt.plot(bp_qk[2][2], "r", label="2")
    line3, = plt.plot(bp_qk[2][4], "g", label="3")
    line4, = plt.plot(bp_qk[2][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("JK (kuhn_poker_nfsp_1, eta1 in evaluation)")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jk[3][0], "b", label="1")
    line2, = plt.plot(bp_jk[3][2], "r", label="2")
    line3, = plt.plot(bp_jk[3][4], "g", label="3")
    line4, = plt.plot(bp_jk[3][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("JQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jq[3][0], "b", label="1")
    line2, = plt.plot(bp_jq[3][2], "r", label="2")
    line3, = plt.plot(bp_jq[3][4], "g", label="3")
    line4, = plt.plot(bp_jq[3][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("KJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kj[3][0], "b", label="1")
    line2, = plt.plot(bp_kj[3][2], "r", label="2")
    line3, = plt.plot(bp_kj[3][4], "g", label="3")
    line4, = plt.plot(bp_kj[3][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("KQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kq[3][0], "b", label="1")
    line2, = plt.plot(bp_kq[3][2], "r", label="2")
    line3, = plt.plot(bp_kq[3][4], "g", label="3")
    line4, = plt.plot(bp_kq[3][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("QJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qj[3][0], "b", label="1")
    line2, = plt.plot(bp_qj[3][2], "r", label="2")
    line3, = plt.plot(bp_qj[3][4], "g", label="3")
    line4, = plt.plot(bp_qj[3][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("QK")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qk[3][0], "b", label="1")
    line2, = plt.plot(bp_qk[3][2], "r", label="2")
    line3, = plt.plot(bp_qk[3][4], "g", label="3")
    line4, = plt.plot(bp_qk[3][6], "y", label="4")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("JK (kuhn_poker_nfsp_1, eta0 in evaluation)")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jk[5][0], "b", label="1")
    line2, = plt.plot(bp_jk[5][2], "r", label="2")
    line3, = plt.plot(bp_jk[5][4], "g", label="3")
    line4, = plt.plot(bp_jk[5][6], "y", label="4")
    plt.axhline(y=2/3,ls=":",c="blue")
    plt.axhline(y=1,ls=":",c="blue")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("JQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_jq[5][0], "b", label="1")
    line2, = plt.plot(bp_jq[5][2], "r", label="2")
    line3, = plt.plot(bp_jq[5][4], "g", label="3")
    line4, = plt.plot(bp_jq[5][6], "y", label="4")
    plt.axhline(y=2/3,ls=":",c="blue")
    plt.axhline(y=1,ls=":",c="blue")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("KJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kj[5][0], "b", label="1")
    line2, = plt.plot(bp_kj[5][2], "r", label="2")
    line3, = plt.plot(bp_kj[5][4], "g", label="3")
    line4, = plt.plot(bp_kj[5][6], "y", label="4")
    plt.axhline(y=0,ls=":",c="blue")
    plt.axhline(y=1,ls=":",c="blue")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(10, 10))
    ax2 = plt.subplot(311)
    ax2.set_title("KQ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_kq[5][0], "b", label="1")
    line2, = plt.plot(bp_kq[5][2], "r", label="2")
    line3, = plt.plot(bp_kq[5][4], "g", label="3")
    line4, = plt.plot(bp_kq[5][6], "y", label="4")
    plt.axhline(y=0,ls=":",c="blue")
    plt.axhline(y=1,ls=":",c="blue")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title("QJ")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qj[5][0], "b", label="1")
    line2, = plt.plot(bp_qj[5][2], "r", label="2")
    line3, = plt.plot(bp_qj[5][4], "g", label="3")
    line4, = plt.plot(bp_qj[5][6], "y", label="4")
    plt.axhline(y=1/3,ls=":",c="yellow")
    plt.axhline(y=2/3,ls=":",c="yellow")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title("QK")
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 1.1, 0.1)
    line1, = plt.plot(bp_qk[5][0], "b", label="1")
    line2, = plt.plot(bp_qk[5][2], "r", label="2")
    line3, = plt.plot(bp_qk[5][4], "g", label="3")
    line4, = plt.plot(bp_qk[5][6], "y", label="4")
    plt.axhline(y=1/3,ls=":",c="yellow")
    plt.axhline(y=2/3,ls=":",c="yellow")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2, line3, line4], loc='upper right')
    plt.ylabel('behavior_probs')
    plt.xlabel('episode(*1e4)')
    plt.show()

    '''
    # episode = range(10, 3010, 10)
    # plot exploitability, avg utility in kuhn_poker_nfsp_0.1_7_27
    plt.figure(figsize=(10, 3))
    #plt.subplot(311)
    #plt.ylim(0, 0.35)
    y_ticks = np.arange(0, 0.35, 0.05)
    line1, = plt.plot(expl_0[0], "b", label="kuhn_poker_nfsp_0.1")
    line2, = plt.plot(expl_1[0], "r", label="kuhn_poker_nfsp_1")
    plt.yticks(y_ticks)
    plt.legend(handles=[line1, line2], loc='upper right')
    plt.ylabel('exploitability')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(15, 20))
    ax2 = plt.subplot(511)
    ax2.set_title("average utility with eta 0 in evaluation (0.1 in training)")
    line1, = plt.plot(avg_rewards_0_against_eachother[0][0], "b", label="agent0")
    line2, = plt.plot(avg_rewards_0_against_eachother[0][1], "r", label="agent1")
    plt.legend(handles=[line1, line2], loc='upper right')
    plt.ylabel('avg utility')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(512)
    ax2.set_title("average utility with eta 1 in evaluation (0.1 in training)")
    line1, = plt.plot(avg_rewards_0_against_eachother[1][0], "b", label="agent0")
    line2, = plt.plot(avg_rewards_0_against_eachother[1][1], "r", label="agent1")
    plt.legend(handles=[line1, line2], loc='upper right')
    plt.ylabel('avg utility')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(513)
    ax2.set_title("average utility with eta 0.1 in evaluation (0.1 in training)")
    line1, = plt.plot(avg_rewards_0_against_eachother[2][0], "b", label="agent0")
    line2, = plt.plot(avg_rewards_0_against_eachother[2][1], "r", label="agent1")
    plt.legend(handles=[line1, line2], loc='upper right')
    plt.ylabel('avg utility')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(514)
    ax2.set_title("average utility with eta 0_1 in evaluation (0.1 in training)")
    line1, = plt.plot(avg_rewards_0_against_eachother[3][0], "b", label="agent0")
    line2, = plt.plot(avg_rewards_0_against_eachother[3][1], "r", label="agent1")
    plt.legend(handles=[line1, line2], loc='upper right')
    plt.ylabel('avg utility')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(515)
    ax2.set_title("average utility with eta 1_0 in evaluation (0.1 in training)")
    line1, = plt.plot(avg_rewards_0_against_eachother[4][0], "b", label="agent0")
    line2, = plt.plot(avg_rewards_0_against_eachother[4][1], "r", label="agent1")
    plt.legend(handles=[line1, line2], loc='upper right')
    plt.ylabel('avg utility')
    plt.xlabel('episode(*1e4)')
    plt.show()

    #plt win rates in kuhn_poker_nfsp_0.1_7_27
    plt.figure(figsize=(15, 12))
    ax2 = plt.subplot(311)
    ax2.set_title("trained agent0 against random agent1(eta 0 in evaluation)")
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta0[3][0], 'b', label='kp_nfsp_0.1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta0[3][1], 'r', label='kp_nfsp_0.1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta0[3][2], 'g', label='kp_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title('trained agent0 against random agent1(eta 0.1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta0[4][0], 'b', label='kp_nfsp_0.1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta0[4][1], 'r', label='kp_nfsp_0.1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta0[4][2], 'g', label='kp_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title('trained agent0 against random agent1(eta 1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta0[5][0], 'b', label='kp_nfsp_0.1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta0[5][1], 'r', label='kp_nfsp_0.1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta0[5][2], 'g', label='kp_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()

    # plot random agent0 against trained agent1 in ttt_nfsp_0.1_7_24
    plt.figure(figsize=(15, 12))
    ax2 = plt.subplot(311)
    ax2.set_title('random agent0 against trained agent1(eta 0 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta0[3][0], 'r', label='kp_nfsp_0.1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta0[3][1], 'b', label='kp_nfsp_0.1_traomed_agent1')
    line3, = plt.plot(win_rates_against_random0_eta0[3][2], 'g', label='kp_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title('random agent0 against trained agent1(eta 0.1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta0[4][0], 'r', label='kp_nfsp_0.1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta0[4][1], 'b', label='kp_nfsp_0.1_trained_agent1')
    line3, = plt.plot(win_rates_against_random0_eta0[4][2], 'g', label='kp_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title('random agent0 against trained agent1(eta 1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta0[5][0], 'r', label='kp_nfsp_0.1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta0[5][1], 'b', label='kp_nfsp_0.1_trained_agent1')
    line3, = plt.plot(win_rates_against_random0_eta0[5][2], 'g', label='kp_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()

    # plot win rates of trained agents against each other in ttt_nfsp_0.1_7_24
    plt.figure(figsize=(15, 20))
    # fig.suptitle("win rates against each other")
    ax2 = plt.subplot(511)
    ax2.set_title("win rates against each other(eta 0 for both in evaluation)")
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta0[5][0], 'b', label='kp_nfsp_0.1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta0[5][1], 'r', label='kp_nfsp_0.1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta0[5][2], 'g', label='kp_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(512)
    ax2.set_title('win rates against each other(eta 1 for both in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta0[6][0], 'b', label='kp_nfsp_0.1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta0[6][1], 'r', label='kp_nfsp_0.1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta0[6][2], 'g', label='kp_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(513)
    ax2.set_title('win rates against each other(eta 0.1 for both in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta0[7][0], 'b', label='kp_nfsp_0.1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta0[7][1], 'r', label='kp_nfsp_0.1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta0[7][2], 'g', label='kp_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')


    ax2 = plt.subplot(514)
    ax2.set_title('win rates against each other(eta 0 for agent0 and eta 1 for agent1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta0[8][0], 'b', label='kp_nfsp_0.1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta0[8][1], 'r', label='kp_nfsp_0.1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta0[8][2], 'g', label='kp_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(515)
    ax2.set_title('win rates against each other(eta 1 for agent0 and eta 0 for agent1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta0[9][0], 'b', label='kp_nfsp_0.1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta0[9][1], 'r', label='kp_nfsp_0.1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta0[9][2], 'g', label='kp_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()

    # plt avg utility, win rates in kuhn_poker_nfsp_1_7_28
    plt.figure(figsize=(15, 20))
    ax2 = plt.subplot(511)
    ax2.set_title("average utility with eta 0 in evaluation (1 in training)")
    line1, = plt.plot(avg_rewards_1_against_eachother[0][0], "b", label="agent0")
    line2, = plt.plot(avg_rewards_1_against_eachother[0][1], "r", label="agent1")
    plt.legend(handles=[line1, line2], loc='upper right')
    plt.ylabel('avg utility')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(512)
    ax2.set_title("average utility with eta 1 in evaluation (1 in training)")
    line1, = plt.plot(avg_rewards_1_against_eachother[1][0], "b", label="agent0")
    line2, = plt.plot(avg_rewards_1_against_eachother[1][1], "r", label="agent1")
    plt.legend(handles=[line1, line2], loc='upper right')
    plt.ylabel('avg utility')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(513)
    ax2.set_title("average utility with eta 0.1 in evaluation (1 in training)")
    line1, = plt.plot(avg_rewards_1_against_eachother[2][0], "b", label="agent0")
    line2, = plt.plot(avg_rewards_1_against_eachother[2][1], "r", label="agent1")
    plt.legend(handles=[line1, line2], loc='upper right')
    plt.ylabel('avg utility')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(514)
    ax2.set_title("average utility with eta 0_1 in evaluation (1 in training)")
    line1, = plt.plot(avg_rewards_1_against_eachother[3][0], "b", label="agent0")
    line2, = plt.plot(avg_rewards_1_against_eachother[3][1], "r", label="agent1")
    plt.legend(handles=[line1, line2], loc='upper right')
    plt.ylabel('avg utility')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(515)
    ax2.set_title("average utility with eta 1_0 in evaluation (1 in training)")
    line1, = plt.plot(avg_rewards_1_against_eachother[4][0], "b", label="agent0")
    line2, = plt.plot(avg_rewards_1_against_eachother[4][1], "r", label="agent1")
    plt.legend(handles=[line1, line2], loc='upper right')
    plt.ylabel('avg utility')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(15, 12))
    ax2 = plt.subplot(311)
    ax2.set_title("trained agent0 against random agent1(eta 0 in evaluation)")
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta1[3][0], 'b', label='kp_nfsp_1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta1[3][1], 'r', label='kp_nfsp_1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta1[3][2], 'g', label='kp_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title('trained agent0 against random agent1(eta 0.1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta1[4][0], 'b', label='kp_nfsp_1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta1[4][1], 'r', label='kp_nfsp_1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta1[4][2], 'g', label='kp_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title('trained agent0 against random agent1(eta 1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta1[5][0], 'b', label='kp_nfsp_1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta1[5][1], 'r', label='kp_nfsp_1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta1[5][2], 'g', label='kp_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(15, 12))
    ax2 = plt.subplot(311)
    ax2.set_title('random agent0 against trained agent1(eta 0 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta1[3][0], 'r', label='kp_nfsp_1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta1[3][1], 'b', label='kp_nfsp_1_traomed_agent1')
    line3, = plt.plot(win_rates_against_random0_eta1[3][2], 'g', label='kp_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title('random agent0 against trained agent1(eta 0.1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta1[4][0], 'r', label='kp_nfsp_1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta1[4][1], 'b', label='kp_nfsp_1_trained_agent1')
    line3, = plt.plot(win_rates_against_random0_eta1[4][2], 'g', label='kp_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title('random agent0 against trained agent1(eta 1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta1[5][0], 'r', label='kp_nfsp_1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta1[5][1], 'b', label='kp_nfsp_1_trained_agent1')
    line3, = plt.plot(win_rates_against_random0_eta1[5][2], 'g', label='kp_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()

    plt.figure(figsize=(15, 20))
    # fig.suptitle("win rates against each other")
    ax2 = plt.subplot(511)
    ax2.set_title("win rates against each other(eta 0 for both in evaluation)")
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta1[5][0], 'b', label='kp_nfsp_1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta1[5][1], 'r', label='kp_nfsp_1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta1[5][2], 'g', label='kp_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(512)
    ax2.set_title('win rates against each other(eta 1 for both in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta1[6][0], 'b', label='kp_nfsp_1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta1[6][1], 'r', label='kp_nfsp_1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta1[6][2], 'g', label='kp_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(513)
    ax2.set_title('win rates against each other(eta 0.1 for both in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta1[7][0], 'b', label='kp_nfsp_1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta1[7][1], 'r', label='kp_nfsp_1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta1[7][2], 'g', label='kp_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')


    ax2 = plt.subplot(514)
    ax2.set_title('win rates against each other(eta 0 for agent0 and eta 1 for agent1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta1[8][0], 'b', label='kp_nfsp_1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta1[8][1], 'r', label='kp_nfsp_1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta1[8][2], 'g', label='kp_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(515)
    ax2.set_title('win rates against each other(eta 1 for agent0 and eta 0 for agent1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta1[9][0], 'b', label='kp_nfsp_1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta1[9][1], 'r', label='kp_nfsp_1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta1[9][2], 'g', label='kp_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()

    
    # plt.subplot(312)
    # line1, = plt.plot(loss_agent0[0][0], "b", label="supervised learning loss")
    # line2, = plt.plot(loss_agent0[0][1], "r", label="reinforcement learning loss")
    # plt.legend(handles=[line1, line2], loc='upper right')
    # plt.ylabel('loss_agent0')
    # plt.xlabel('episode(*1e4)')
    # 
    # plt.subplot(313)
    # line1, = plt.plot(loss_agent1[0][0], "b", label="supervised learning loss")
    # line2, = plt.plot(loss_agent1[0][1], "r", label="reinforcement learning loss")
    # plt.legend(handles=[line1, line2], loc='upper right')
    # plt.ylabel('loss_agent1')
    # plt.xlabel('episode(*1e4)')
    # plt.show()
    
    # plot trained agent0 against random agent1 in kp_nfsp_0.1_6_30

    # plot exploitability, avg_utility in tic_tac_toe_nfsp_0.1_7_24
    plt.figure(figsize=(10,3))
    #plt.subplot(311)
    plt.ylim(0, 1.05)
    x_range_0 = [4*(x+1) for x in range(len(expl_0[1]))]
    line1, = plt.plot(x_range_0, expl_0[1], "b", label="ttt_nfsp_0.1")
    x_range_1 = [4*(x+1) for x in range(len(expl_1[1]))]
    line2, = plt.plot(x_range_1, expl_1[1], "r", label="ttt_nfsp_1")
    plt.legend(handles=[line1, line2], loc='lower right')
    plt.ylabel('exploitability')
    plt.xlabel('episode(*1e4)')
    plt.show()

    
    # plt.subplot(312)
    # line1, = plt.plot(loss_agent0[0][0], "b", label="supervised learning loss")
    # line2, = plt.plot(loss_agent0[0][1], "r", label="reinforcement learning loss")
    # plt.legend(handles=[line1, line2], loc='lower right')
    # plt.ylabel('loss_agent0')
    # plt.xlabel('episode(*1e4)')
    # 
    # plt.subplot(313)
    # line1, = plt.plot(loss_agent1[0][0], "b", label="supervised learning loss")
    # line2, = plt.plot(loss_agent1[0][1], "r", label="reinforcement learning loss")
    # plt.legend(handles=[line1, line2], loc='lower right')
    # plt.ylabel('loss_agent1')
    # plt.xlabel('episode(*1e4)')
    # plt.show()
    
    # plot trained agent0 against random agent1 in tic_tac_toe_nfsp_0.1_7_24
    plt.figure(figsize=(15, 12))
    ax2 = plt.subplot(311)
    ax2.set_title("trained agent0 against random agent1(eta 0 in evaluation)")
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta0[0][0], 'b', label='ttt_nfsp_0.1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta0[0][1], 'r', label='ttt_nfsp_0.1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta0[0][2], 'g', label='ttt_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title('trained agent0 against random agent1(eta 0.1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta0[1][0], 'b', label='ttt_nfsp_0.1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta0[1][1], 'r', label='ttt_nfsp_0.1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta0[1][2], 'g', label='ttt_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title('trained agent0 against random agent1(eta 1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta0[2][0], 'b', label='ttt_nfsp_0.1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta0[2][1], 'r', label='ttt_nfsp_0.1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta0[2][2], 'g', label='ttt_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()

    # plot random agent0 against trained agent1 in ttt_nfsp_0.1_7_24
    plt.figure(figsize=(15, 12))
    ax2 = plt.subplot(311)
    ax2.set_title('random agent0 against trained agent1(eta 0 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta0[0][0], 'r', label='ttt_nfsp_0.1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta0[0][1], 'b', label='ttt_nfsp_0.1_traomed_agent1')
    line3, = plt.plot(win_rates_against_random0_eta0[0][2], 'g', label='ttt_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title('random agent0 against trained agent1(eta 0.1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta0[1][0], 'r', label='ttt_nfsp_0.1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta0[1][1], 'b', label='ttt_nfsp_0.1_trained_agent1')
    line3, = plt.plot(win_rates_against_random0_eta0[1][2], 'g', label='ttt_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title('random agent0 against trained agent1(eta 1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta0[2][0], 'r', label='ttt_nfsp_0.1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta0[2][1], 'b', label='ttt_nfsp_0.1_trained_agent1')
    line3, = plt.plot(win_rates_against_random0_eta0[2][2], 'g', label='ttt_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()

    # plot win rates of trained agents against each other in ttt_nfsp_0.1_7_24
    plt.figure(figsize=(15, 20))
    # fig.suptitle("win rates against each other")
    ax2 = plt.subplot(511)
    ax2.set_title("win rates against each other(eta 0 for both in evaluation)")
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta0[0][0], 'b', label='ttt_nfsp_0.1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta0[0][1], 'r', label='ttt_nfsp_0.1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta0[0][2], 'g', label='ttt_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(512)
    ax2.set_title('win rates against each other(eta 1 for both in evaluation)')
    plt.ylim(-0.05, 1.05)
    line1, = plt.plot(win_rates_against_eachother_eta0[1][0], 'b', label='ttt_nfsp_0.1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta0[1][1], 'r', label='ttt_nfsp_0.1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta0[1][2], 'g', label='ttt_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(513)
    ax2.set_title('win rates against each other(eta 0.1 for both in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta0[2][0], 'b', label='ttt_nfsp_0.1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta0[2][1], 'r', label='ttt_nfsp_0.1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta0[2][2], 'g', label='ttt_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')


    ax2 = plt.subplot(514)
    ax2.set_title('win rates against each other(eta 0 for agent0 and eta 1 for agent1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta0[3][0], 'b', label='ttt_nfsp_0.1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta0[3][1], 'r', label='ttt_nfsp_0.1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta0[3][2], 'g', label='ttt_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(515)
    ax2.set_title('win rates against each other(eta 1 for agent0 and eta 0 for agent1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta0[4][0], 'b', label='ttt_nfsp_0.1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta0[4][1], 'r', label='ttt_nfsp_0.1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta0[4][2], 'g', label='ttt_nfsp_0.1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()

    # plt win rates of ttt_nfsp_1_7_29 with eta 1 in training
    plt.figure(figsize=(15, 12))
    ax2 = plt.subplot(311)
    ax2.set_title("trained agent0 against random agent1(eta 0 in evaluation)")
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta1[0][0], 'b', label='ttt_nfsp_1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta1[0][1], 'r', label='ttt_nfsp_1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta1[0][2], 'g', label='ttt_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title('trained agent0 against random agent1(eta 0.1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta1[1][0], 'b', label='ttt_nfsp_1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta1[1][1], 'r', label='ttt_nfsp_1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta1[1][2], 'g', label='ttt_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title('trained agent0 against random agent1(eta 1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random1_eta1[2][0], 'b', label='ttt_nfsp_1_trained_agent0')
    line2, = plt.plot(win_rates_against_random1_eta1[2][1], 'r', label='ttt_nfsp_1_random_agent1')
    line3, = plt.plot(win_rates_against_random1_eta1[2][2], 'g', label='ttt_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()

    # plot random agent0 against trained agent1 in ttt_nfsp_0.1_7_24
    plt.figure(figsize=(15, 12))
    ax2 = plt.subplot(311)
    ax2.set_title('random agent0 against trained agent1(eta 0 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta1[0][0], 'r', label='ttt_nfsp_1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta1[0][1], 'b', label='ttt_nfsp_1_traomed_agent1')
    line3, = plt.plot(win_rates_against_random0_eta1[0][2], 'g', label='ttt_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(312)
    ax2.set_title('random agent0 against trained agent1(eta 0.1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta1[1][0], 'r', label='ttt_nfsp_1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta1[1][1], 'b', label='ttt_nfsp_1_trained_agent1')
    line3, = plt.plot(win_rates_against_random0_eta1[1][2], 'g', label='ttt_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(313)
    ax2.set_title('random agent0 against trained agent1(eta 1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_random0_eta1[2][0], 'r', label='ttt_nfsp_1_random_agent0')
    line2, = plt.plot(win_rates_against_random0_eta1[2][1], 'b', label='ttt_nfsp_1_trained_agent1')
    line3, = plt.plot(win_rates_against_random0_eta1[2][2], 'g', label='ttt_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()

    # plot win rates of trained agents against each other in ttt_nfsp_0.1_7_24
    plt.figure(figsize=(15, 20))
    # fig.suptitle("win rates against each other")
    ax2 = plt.subplot(511)
    ax2.set_title("win rates against each other(eta 0 for both in evaluation)")
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta1[0][0], 'b', label='ttt_nfsp_1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta1[0][1], 'r', label='ttt_nfsp_1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta1[0][2], 'g', label='ttt_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(512)
    ax2.set_title('win rates against each other(eta 1 for both in evaluation)')
    plt.ylim(-0.05, 1.05)
    line1, = plt.plot(win_rates_against_eachother_eta1[1][0], 'b', label='ttt_nfsp_1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta1[1][1], 'r', label='ttt_nfsp_1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta1[1][2], 'g', label='ttt_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(513)
    ax2.set_title('win rates against each other(eta 0.1 for both in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta1[2][0], 'b', label='ttt_nfsp_1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta1[2][1], 'r', label='ttt_nfsp_1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta1[2][2], 'g', label='ttt_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')


    ax2 = plt.subplot(514)
    ax2.set_title('win rates against each other(eta 0 for agent0 and eta 1 for agent1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta1[3][0], 'b', label='ttt_nfsp_1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta1[3][1], 'r', label='ttt_nfsp_1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta1[3][2], 'g', label='ttt_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')

    ax2 = plt.subplot(515)
    ax2.set_title('win rates against each other(eta 1 for agent0 and eta 0 for agent1 in evaluation)')
    plt.ylim(0, 1)
    line1, = plt.plot(win_rates_against_eachother_eta1[4][0], 'b', label='ttt_nfsp_1_agent0')
    line2, = plt.plot(win_rates_against_eachother_eta1[4][1], 'r', label='ttt_nfsp_1_agent1')
    line3, = plt.plot(win_rates_against_eachother_eta1[4][2], 'g', label='ttt_nfsp_1_draw')
    plt.legend(handles=[line1, line2, line3], loc='lower right', prop={'size': 9})
    plt.ylabel('win_rate')
    plt.xlabel('episode(*1e4)')
    plt.show()
    '''



if __name__ == "__main__":
    app.run(main)